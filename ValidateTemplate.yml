parameters:
# GIT
- name: token
  type: string
  default: ${System.Token}
- name: token_type
  default: "OAuth"
# Terraform
- name: environment_code
- name: config_folder
- name: backend_config_path
- name: svc_connection_name
- name: terraform_version
  default: "1.10.5"

stages:
  - stage: Validation_Stage
    displayName: Validation_Stage
    jobs:
      - job: Terraform_Plan_Operation
        displayName: "Terraform_Plan_Operation"
        workspace:
          clean: all 
        steps:
          - checkout: self
          
          - template: InitGit.yml
            parameters: 
              token: ${{ parameters.token }}
              token_type: ${{ parameters.token_type }}

          - task: TerraformInstaller@1
            displayName: "Terraform installation version ${{parameters.terraform_version}}"
            inputs:
              terraformVersion: "${{ parameters.terraform_version }}"

          - task: TerraformCLI@1
            displayName: "Terraform Initialization"
            inputs:
              command: "init"
              workingDirectory: "(System.DefaultWorkingDirectory)/${{parameters.config_folder}}"
              backendType: "azurerm"
              backendServiceArm: "{{parameters.svc_connection_name}}"
              commandOptions: "-backend-config=${{parameters.backend_config_path}}"

          - template: ResetGit.yml

          - task: TerraformCLI@1
            displayName: "Terraform_Plan" 
            name: "Terraform_Plan"
            inputs:
              command: "plan" 
              workingDirectory: "(System.DefaultWorkingDirectory)/${{parameters.config_folder}}"
              environmentServiceName: "${{parameters.svc_connection_name}}"
              commandOptions: "--var-file=env/${{parameters.environment_code}}.tfvars -out=$(System.DefaultWorkingDirectory)/${{parameters.config_folder}}/terraform.tfplan"
              publishPlanResults: "Terraform_Plan"

          - task: PowerShell@2
            name: "checking_tfplan_changes"
            displayName: "Setting the variable Teeraform Plan Changes" 
            inputs:
              targetType: "inline"
              script: |
                Write-Host "Terraform changes detected: $(TERRAFORM_PLAN_HAS_CHANGES)"
                echo "##vso[task.setvariable variable=output_tfplan_changes; isOutput=true]$(TERRAFORM_PLAN_HAS_CHANGES)"


